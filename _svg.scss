/*------------------------------------------------------------------------------------------------*\
    Fall-Back SVG Pattern v0.1
\*------------------------------------------------------------------------------------------------*/

$fallback-svg--fixed-height:      100px !default;


$fallback-svg--padding:           0 !default;
//$fallback-svg--padding:           10px !default;



$fallback-svg--border-width:      0 !default;
$fallback-svg--border-style:      solid !default;
$fallback-svg--border-color:      #333 !default;
//$fallback-svg--border-width:      1px !default;



$fallback-svg--link-bg-color:     transparent !default;
$fallback-svg--link-bg-color-alt: transparent !default;


// Set to null if you don't want to use this:
$fallback-svg--text-width:        null !default;

// Set to null if you don't want to use this:
$fallback-svg--text-fontsize:     null !default;

/*
    1. Make the link fit the content.
    2. Provide positioning context for the pseudo element.
    3. Remove underline on some older browsers (Android 2.x mainly)
    4. Prevent fallback text from showing unless image fails to load.
*/
.svg__link {
    display: inline-block; /* [1] */
    position: relative;    /* [2] */
    text-decoration: none; /* [3] */
    overflow: hidden;      /* [4] */
    
    @if $fallback-svg--border-width > 0 {
        border-width: $fallback-svg--border-width;
        border-style: $fallback-svg--border-style;
        border-color: $fallback-svg--border-color;
    }
    
    background-color: $fallback-svg--link-bg-color;
}

.svg-logo .svg__link:hover,
.svg-logo .svg__link:active,
.svg-logo .svg__link:focus {
    background-color: $fallback-svg--link-bg-color-alt;
}

/*
    Objects inside links prevent the link from functioning, this hack fixes 
    that. `pointer-events: none;` would solve it but support isn't good 
    enough (http://caniuse.com/#search=pointer-events).
    
    1. This is needed for IE9+ or hover effects don't work over images 
       embedded in the SVG.
*/
.svg__link:after {
    content: ""; 
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background: rgba(0,0,0,0); /* [1] */
}

.svg__link:hover {
    text-decoration: none;
}

/*
    1. Remove gap below.
    2. Prevent pointer-events blocking link action in supporting browsers.
*/
.svg__link .svg__image {
    vertical-align: top;  /* [1] */
    pointer-events: none; /* [2] */
}

/*
    1. The br is only useful for non-css fallback display, so we can hide it.
*/
.svg__link br {
    display: none; /* [1] */
}

/*
    1. But we may need to be able to insert line breaks inside the text to prevent 
       the text from pushing the container to wide.
*/
.svg__fallback-text br {
    display: inline; /* [1] */
}

/*------ Fixed Height ------*/
/*
    Set this to your required height.
    If you need more variants, create separate modification classes instead.
*/
@mixin svg--fixed-height($height, $name:"svg--fixed-height", $padding:$fallback-svg--padding, $border:$fallback-svg--border-width) {
    @if $padding > 0 {
    
        .#{$name} {
            height: $height;
        }

        $height: $height - ($padding * 2) - ($border * 2);
        
        .#{$name} .svg__link,
        .#{$name} .svg__image {
            height: $height;
        }
        
        .#{$name} .svg__link {
            padding: $padding;
            -webkit-box-sizing: content-box;
            -moz-box-sizing: content-box;
            box-sizing: content-box;
        }
        
    } @else {
    
        .#{$name},
        .#{$name} .svg__link,
        .#{$name} .svg__image {
            height: $height;
        }
        
    }
    
    /*
        Allow the fallback image to scale properly.
        1. IE6 - can be removed if unnecessary.
    */
    .#{$name} .svg__fallback-image {
        max-height: $height;
        _height: $height; /* [1] */
    }
    
    /*
        Overflow doesn't work as expected in old Opera Mobile, so provide clip as well.
    */
    .svg--fixed-height .svg__link {
        position: absolute;
        clip: rect(0, auto, $height, 0);
    }
}


/*
    1. Allow pattern to contract.
*/
.svg--fixed-height .svg__link,
.svg--fixed-height .svg__image {
    max-width: 100%; /* [1] */
}

.svg--fixed-height .svg__fallback-image {
    max-width: 100%;
    height: auto;
}

/*
    1. Force fallback text below object.
    2. A problem with this technique arises if the fallback text is quite long. For the 
       fixed-height version of the SVG fallback pattern, long fallback text forces the parent 
       link to be wider than the SVG image.
       If this problem occurs try you'll need to either reduce the line-length by reducing the 
       font-size or adding `<br>`s in the fallback text, or assign a width to the 
       `.svg__fallback-text` class that you know to be small enough to force the text to wrap.
*/
.svg--fixed-height .svg__fallback-text {
    display: block; /* [1] */
    
    @if $fallback-svg--text-width != null {
        width: $fallback-svg--text-width;    /* [2] */
    }
    
    @if $fallback-svg--text-fontsize != null {
        font-size: $fallback-svg--text-fontsize; /* [2] */
    }
    
    @if $fallback-svg--padding > 0 {
        position: relative;
        bottom: -$fallback-svg--padding;
    }
}

@include svg--fixed-height($fallback-svg--fixed-height);




/*------ Fluid ------*/
/*
   1. Force the svg wrapper and link to fill their containers.
*/
.svg--fluid,
.svg--fluid .svg__link {
    display: block; /* [1] */
    height: 100%;   /* [1] */
    width: 100%;    /* [1] */
}

/*
    1. Force the children (object and fallback) text onto a single line. 
       Note they must be inline-block.
*/
.svg--fluid .svg__link {
    white-space: nowrap; /* [1] */
    
    @if $fallback-svg--padding > 0 {
        padding: $fallback-svg--padding;
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
    }
}

/*
   1. Force the object and fallback image to proportionally fill their 
      containers, overriding attribute values.
*/
.svg--fluid .svg__image,
.svg--fluid .svg__fallback-image {
    height: auto; /* [1] */
    width: 100%;  /* [1] */
}

/*
    1. Make the fallback text inline-block so it is forced to the right of the object.
       This hides it unless the image fails (in which case it collapses to the width of the text 
       that's revealed).
    2. Reset the white-space so it can form line-breaks.
*/
.svg--fluid .svg__fallback-text {
    display: inline-block; /* [1] */
    white-space: normal;   /* [2] */
    
    @if $fallback-svg--padding > 0 {
        position: relative;
        left: $fallback-svg--padding;
    }
}


/*----------------------------------------*\
    Old Browser Hacks - Optional
\*----------------------------------------*/
   
/* IE8- hacks: */
@media \0screen\,screen\9 {
    /*
        PNG fallbacks also show the text (which isn't what we want), but we
        don't need it as it has `alt` text, so just hide it.
        Overqualified to increase specificity.
    */
    .svg--fixed-height .svg__fallback-text,
    .svg--fluid .svg__fallback-text {
        display: none;
    }
}

/* Old Android (2.3) hacks: */
@media screen and (min-width:0\-) {
    /*
        PNG fallbacks also show the text (which isn't what we want), but we
        don't need it as it has `alt` text, so just hide it.
        Overqualified to increase specificity.
    */
    .svg--fixed-height .svg__fallback-text,
    .svg--fluid .svg__fallback-text {
        display: none;
    }
}

/*------------------------------------------------------------------------------------------------*/
